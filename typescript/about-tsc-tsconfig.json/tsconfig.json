{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    // ! es5까지는 let과 const가 추가되기 전이므로 es6 이상(또는 es2015 이상)으로 설정해야 한다.
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs" /* Specify what module code is generated. */,
    "rootDir": "./src" /* Specify the root folder within your source files. */,
    // ? rootDir 옵션은 컴파일을 시작할 디렉토리를 지정하는 것이다.(지정한 디렉토리 부터 시작하여 해당 디렉토리의 하위 디렉토리를 모두 포함한다.)
    // ? 지정하지 않으면 기본 값으로 프로젝트 최상단의 디렉토리(프로젝트 디렉토리)가 기준이 된다.
    // ? 그러면 프로젝트 디렉토리에 존재하는 모든 ts 파일을 컴파일한다.
    // ? 위 처럼 ./src 디렉토리를 지정해 놓으면 ./src 에 위치한 모든 하위 디렉토리까지 포함한 범위에서의 ts 파일만 컴파일 한다.
    // ? 아래에 include 옵션에 /src/app.ts 등과 같이 지정한 것과 동일하다.
    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // ? souceMap 옵션의 값을 true로 활성화 하면 브라우저에서 프로그램 실행 시, ts 파일을 chrome 개발자 툴의 source 탭에서 디버깅 할 수 있다.
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // ? outFile 옵션은 컴파일한 ts 파일에 대한 js 파일을 지정한 경로의 디렉토리에 생성하도록 지정하는 옵션이다.
    "outDir": "./dist",
    // ? 위 처럼 옵션을 활성화 하고 경로를 지정하면 dist 디렉토리에 컴파일한 ts 파일의 js 파일이 생성된다.
    "removeComments": true /* Disable emitting comments. */,
    // ? removeComments 옵션은 컴파일 하는 ts 파일에 작성된 주석을 제거한 후 js로 컴파일 하는 옵션이다.
    // ?  주석도 용량이기 때문에 해당 옵션을 사용하면 컴파일 된 js 파일의 용량을 줄일 수 있다.
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  // ? "exclude": ["analystics.ts"] // exclude 옵션에 추가된 파일은 컴파일 대상에서 제외된다.
  // ? "exclude": ["*.dev.ts"] // 파일 이름에 dev.ts가 포함되어 있는 모든 파일을 컴파일 대상에서 제외한다.
  // ? "exclude": ["**/*.dev.ts"] // 이 프로젝트의 모든 디렉토리의 파일 이름에 dev.ts가 포함되어 있는 모든 파일을 컴파일 대상에서 제외한다.
  // ? "exclude": ["node_modules"] // node_modules에 있는 모든 ts 파일을 컴파일 대상에서 제외한다는 것이다.
  // ! 하지만 exclude 옵션을 정의하지 않으면 기본 값(Default value)으로 node_modules 디렉토리는 컴파일 제외 대상이기 때문에 궂이 작성할 필요가 없고,
  // ! 다른 디렉토리 혹은 파일을 컴파일 대상에서 제외시키려고 exclude 옵션을 작성하는 경우에는 꼭 node_modules를 추가해줘야 한다.
  // ! 추가해주지 않으면 node_modules가 제외되지 않으며 이 경우 수많은 의존성 라이브러리의 모든 ts 파일들을 컴파일 하느라 성능에 매우 악영향을 미치게 된다.
  "exclude": ["node_modules"] // node_modules만 추가하는 경우는 기본 값이 컴파일 제외 대상이기 때문에 적지 않아도 된다.(그렇기 때문에 이 줄은 불필요하다.)
  // ? "include": ["src/app.ts", "src/analystics.ts"] // exclude와 반대로 컴파일할 파일을 지정하는 옵션이다.
  // ? 위의 경우 node_modules 디렉토리의 모든 ts 파일들은 컴파일 대상에서 제외되고 반대로 app.ts와 analystics.ts 파일은 컴파일 대상에 포함된다.
  // ? 이 경우 다른 ts파일이 있어도 app.ts와 analystics.ts 두 파일만 컴파일 된다.
  // ! 경로를 정확히 지정해줘야 한다.
}
