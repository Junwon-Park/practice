{"ast":null,"code":"var _jsxFileName = \"/home/semandev/Documents/coding/practice/react/01-starting-setup/src/components/ExpenseItem.js\";\nimport \"./ExpenseItem.css\"; // function ExpenseItem({ title, amount, date }) {\n//   //? Props는 꼭 객체이기 때문에 당연히 구조분해 할당으로 받을 수 있다.\n//   //! 물론 이때, 각 속성의 이름은 넘겨줄 때의 이름과 동일해야 한다.\n//   // toLocaleString()은 날짜를 다루기 위해 JS에서 제공하는 기본 메서드이다.\n//   const month = date.toLocaleString(\"en-US\", { month: \"long\" });\n//   const day = date.toLocaleString(\"en-US\", { day: \"2-digit\" });\n//   const year = date.getFullYear();\n//   return (\n//     <div className=\"expense-item\">\n//       <div>\n//         <div>{month}</div>\n//         <div>{year}</div>\n//         <div>{day}</div>\n//       </div>\n//       <div className=\"expense-item__description\">\n//         <h2>{title}</h2>\n//         <div className=\"expense-item__price\">${amount}</div>\n//       </div>\n//     </div>\n//   );\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseItem(props) {\n  //? props라는 이름의 객체로 Props 전달(이 객체의 이름은 사용자 지정으로 내가 정하는 것이다.)\n  const [title, amount, date] = [props.title, props.amount, props.date.toLocaleString(\"en-US\", {\n    month: \"long\"\n  })];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"$\", amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this); // return (\n  //  <h2>Expense item!</h2>\n  //  <h2>It's too expensive!</h2>\n  // );\n  // 위 처럼 작성할 수 없다. 왜냐하면(아래)\n  //! 모든 JSX 구문에는 단 하나의 root 요소가 필요하다.\n  //! 어떤 요소가 최상위의 같은 선상에 두 개 이상 동시에 존재할 수 없다.\n  //! 그래서 위 처럼 div 태그로 감싸 주어서 단 하나의 root 요소의 역할을 하도록 한 것이다.\n  //? 그리고 JSX를 ()로 감싸주지 않으면 unreachable code detected 에러가 발생한다.\n}\n\n_c = ExpenseItem;\nexport default ExpenseItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["ExpenseItem","props","title","amount","date","toLocaleString","month"],"sources":["/home/semandev/Documents/coding/practice/react/01-starting-setup/src/components/ExpenseItem.js"],"sourcesContent":["import \"./ExpenseItem.css\";\n\n// function ExpenseItem({ title, amount, date }) {\n//   //? Props는 꼭 객체이기 때문에 당연히 구조분해 할당으로 받을 수 있다.\n//   //! 물론 이때, 각 속성의 이름은 넘겨줄 때의 이름과 동일해야 한다.\n\n//   // toLocaleString()은 날짜를 다루기 위해 JS에서 제공하는 기본 메서드이다.\n//   const month = date.toLocaleString(\"en-US\", { month: \"long\" });\n//   const day = date.toLocaleString(\"en-US\", { day: \"2-digit\" });\n//   const year = date.getFullYear();\n\n//   return (\n//     <div className=\"expense-item\">\n//       <div>\n//         <div>{month}</div>\n//         <div>{year}</div>\n//         <div>{day}</div>\n//       </div>\n//       <div className=\"expense-item__description\">\n//         <h2>{title}</h2>\n//         <div className=\"expense-item__price\">${amount}</div>\n//       </div>\n//     </div>\n//   );\n\nfunction ExpenseItem(props) {\n  //? props라는 이름의 객체로 Props 전달(이 객체의 이름은 사용자 지정으로 내가 정하는 것이다.)\n  const [title, amount, date] = [\n    props.title,\n    props.amount,\n    props.date.toLocaleString(\"en-US\", { month: \"long\" }),\n  ];\n  return (\n    <div className=\"expense-item\">\n      <div>{date}</div>\n      <div className=\"expense-item__description\">\n        <h2>{title}</h2>\n        <div className=\"expense-item__price\">${amount}</div>\n      </div>\n    </div>\n  );\n\n  // return (\n  //  <h2>Expense item!</h2>\n  //  <h2>It's too expensive!</h2>\n  // );\n  // 위 처럼 작성할 수 없다. 왜냐하면(아래)\n  //! 모든 JSX 구문에는 단 하나의 root 요소가 필요하다.\n  //! 어떤 요소가 최상위의 같은 선상에 두 개 이상 동시에 존재할 수 없다.\n  //! 그래서 위 처럼 div 태그로 감싸 주어서 단 하나의 root 요소의 역할을 하도록 한 것이다.\n  //? 그리고 JSX를 ()로 감싸주지 않으면 unreachable code detected 에러가 발생한다.\n}\n\nexport default ExpenseItem;\n"],"mappings":";AAAA,OAAO,mBAAP,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASA,WAAT,CAAqBC,KAArB,EAA4B;EAC1B;EACA,MAAM,CAACC,KAAD,EAAQC,MAAR,EAAgBC,IAAhB,IAAwB,CAC5BH,KAAK,CAACC,KADsB,EAE5BD,KAAK,CAACE,MAFsB,EAG5BF,KAAK,CAACG,IAAN,CAAWC,cAAX,CAA0B,OAA1B,EAAmC;IAAEC,KAAK,EAAE;EAAT,CAAnC,CAH4B,CAA9B;EAKA,oBACE;IAAK,SAAS,EAAC,cAAf;IAAA,wBACE;MAAA,UAAMF;IAAN;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,2BAAf;MAAA,wBACE;QAAA,UAAKF;MAAL;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAK,SAAS,EAAC,qBAAf;QAAA,gBAAuCC,MAAvC;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF,CAP0B,CAiB1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD;;KA1BQH,W;AA4BT,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}