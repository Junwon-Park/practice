{"ast":null,"code":"var _jsxFileName = \"/home/semandev/Documents/coding/practice/react/01-starting-setup/src/index.js\";\n//! index.js는 npm start로 앱을 실행하면 가장 먼저 실행되는 파일이다.\nimport ReactDOM from \"react-dom/client\"; // react-dom이라는 서드파티 라이브러리를 불러오 ReactDom이라는 객체로 불러온다.\n//? 실제로 package.json의 dependencies에 설치되어 있다.(CRA를 사용하면 프로젝트를 생성할 때, 자동으로 설치된다.)\n//? dependencies에 보면 react도 있다. 그 말은 react도 외부 라이브러리를 불러와 사용하고 있다는 것이다.\n//? CRA를 사용하면 React 라이브러리를 설치하고 React 개발에 꼭 필요한 필수 라이브러리를 설치해주는 것이다.\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")); //? 위에서 불러온 ReactDOM 객체의 createRoot() 메서드로 root 객체 생성\n//? createRoot()의 인자로는 root가 될 DOM 객체를 대입한다.\n\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 13\n}, this)); //? ReactDOM.createRoot()로 생성한 root 객체의 render() 메서드에 App 컴포넌트를 넣어서 App 컴포넌트를 root 컴포넌트로써 렌더링한다.\n//! 여기에서 root 객체를 생성하기 위해 createRoot() 메서드의 인자로 넣었던 HTML의 DOM 객체인 document.getElementById(\"root\")는\n//! public/index.html의 body 태그 내에 존재하는 <div id=\"root\"></div> 요소이다.\n//! public/index.html은 React에서 유일하게 존재하는 HTML 파일이다.","map":{"version":3,"names":["ReactDOM","App","root","createRoot","document","getElementById","render"],"sources":["/home/semandev/Documents/coding/practice/react/01-starting-setup/src/index.js"],"sourcesContent":["//! index.js는 npm start로 앱을 실행하면 가장 먼저 실행되는 파일이다.\nimport ReactDOM from \"react-dom/client\";\n// react-dom이라는 서드파티 라이브러리를 불러오 ReactDom이라는 객체로 불러온다.\n//? 실제로 package.json의 dependencies에 설치되어 있다.(CRA를 사용하면 프로젝트를 생성할 때, 자동으로 설치된다.)\n//? dependencies에 보면 react도 있다. 그 말은 react도 외부 라이브러리를 불러와 사용하고 있다는 것이다.\n//? CRA를 사용하면 React 라이브러리를 설치하고 React 개발에 꼭 필요한 필수 라이브러리를 설치해주는 것이다.\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n//? 위에서 불러온 ReactDOM 객체의 createRoot() 메서드로 root 객체 생성\n//? createRoot()의 인자로는 root가 될 DOM 객체를 대입한다.\nroot.render(<App />);\n//? ReactDOM.createRoot()로 생성한 root 객체의 render() 메서드에 App 컴포넌트를 넣어서 App 컴포넌트를 root 컴포넌트로써 렌더링한다.\n//! 여기에서 root 객체를 생성하기 위해 createRoot() 메서드의 인자로 넣었던 HTML의 DOM 객체인 document.getElementById(\"root\")는\n//! public/index.html의 body 태그 내에 존재하는 <div id=\"root\"></div> 요소이다.\n//! public/index.html은 React에서 유일하게 존재하는 HTML 파일이다.\n"],"mappings":";AAAA;AACA,OAAOA,QAAP,MAAqB,kBAArB,C,CACA;AACA;AACA;AACA;;AAEA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,IAAI,GAAGF,QAAQ,CAACG,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb,C,CACA;AACA;;AACAH,IAAI,CAACI,MAAL,eAAY,QAAC,GAAD;EAAA;EAAA;EAAA;AAAA,QAAZ,E,CACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}