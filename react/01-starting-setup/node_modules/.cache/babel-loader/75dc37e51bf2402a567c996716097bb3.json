{"ast":null,"code":"var _jsxFileName = \"/home/semandev/Documents/coding/practice/react/01-starting-setup/src/components/ExpenseItem.js\";\nimport \"./ExpenseItem.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseItem(_ref) {\n  let {\n    title,\n    amount,\n    date\n  } = _ref;\n  //? Props는 꼭 객체이기 때문에 당연히 구조분해 할당으로 받을 수 있다.\n  //! 물론 이때, 각 속성의 이름은 넘겨줄 때의 이름과 동일해야 한다.\n  const month = date.toLocaleString(\"en-US\", {\n    month: \"long\"\n  });\n  const day = date.toLocaleString(\"en-US\", {\n    day: \"2-digit\"\n  });\n  const year = date.getFullYear();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: month\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"$\", amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this); // function ExpenseItem(props) {\n  //   //? props라는 이름의 객체로 Props 전달(이 객체의 이름은 사용자 지정으로 내가 정하는 것이다.)\n  //   const [title, amount, date] = [\n  //     props.title,\n  //     props.amount,\n  //     props.date.toLocaleString(\"en-US\", { month: \"long\" }),\n  //   ];\n  //   return (\n  //     <div className=\"expense-item\">\n  //       <div>{date}</div>\n  //       <div className=\"expense-item__description\">\n  //         <h2>{title}</h2>\n  //         <div className=\"expense-item__price\">${amount}</div>\n  //       </div>\n  //     </div>\n  //   );\n  // return (\n  //  <h2>Expense item!</h2>\n  //  <h2>It's too expensive!</h2>\n  // );\n  // 위 처럼 작성할 수 없다. 왜냐하면(아래)\n  //! 모든 JSX 구문에는 단 하나의 root 요소가 필요하다.\n  //! 어떤 요소가 최상위의 같은 선상에 두 개 이상 동시에 존재할 수 없다.\n  //! 그래서 위 처럼 div 태그로 감싸 주어서 단 하나의 root 요소의 역할을 하도록 한 것이다.\n  //? 그리고 JSX를 ()로 감싸주지 않으면 unreachable code detected 에러가 발생한다.\n}\n\n_c = ExpenseItem;\nexport default ExpenseItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["ExpenseItem","title","amount","date","month","toLocaleString","day","year","getFullYear"],"sources":["/home/semandev/Documents/coding/practice/react/01-starting-setup/src/components/ExpenseItem.js"],"sourcesContent":["import \"./ExpenseItem.css\";\n\nfunction ExpenseItem({ title, amount, date }) {\n  //? Props는 꼭 객체이기 때문에 당연히 구조분해 할당으로 받을 수 있다.\n  //! 물론 이때, 각 속성의 이름은 넘겨줄 때의 이름과 동일해야 한다.\n  const month = date.toLocaleString(\"en-US\", { month: \"long\" });\n  const day = date.toLocaleString(\"en-US\", { day: \"2-digit\" });\n  const year = date.getFullYear();\n  return (\n    <div className=\"expense-item\">\n      <div>\n        <div>{month}</div>\n        <div>{year}</div>\n        <div>{day}</div>\n      </div>\n      <div className=\"expense-item__description\">\n        <h2>{title}</h2>\n        <div className=\"expense-item__price\">${amount}</div>\n      </div>\n    </div>\n  );\n\n  // function ExpenseItem(props) {\n  //   //? props라는 이름의 객체로 Props 전달(이 객체의 이름은 사용자 지정으로 내가 정하는 것이다.)\n  //   const [title, amount, date] = [\n  //     props.title,\n  //     props.amount,\n  //     props.date.toLocaleString(\"en-US\", { month: \"long\" }),\n  //   ];\n  //   return (\n  //     <div className=\"expense-item\">\n  //       <div>{date}</div>\n  //       <div className=\"expense-item__description\">\n  //         <h2>{title}</h2>\n  //         <div className=\"expense-item__price\">${amount}</div>\n  //       </div>\n  //     </div>\n  //   );\n\n  // return (\n  //  <h2>Expense item!</h2>\n  //  <h2>It's too expensive!</h2>\n  // );\n  // 위 처럼 작성할 수 없다. 왜냐하면(아래)\n  //! 모든 JSX 구문에는 단 하나의 root 요소가 필요하다.\n  //! 어떤 요소가 최상위의 같은 선상에 두 개 이상 동시에 존재할 수 없다.\n  //! 그래서 위 처럼 div 태그로 감싸 주어서 단 하나의 root 요소의 역할을 하도록 한 것이다.\n  //? 그리고 JSX를 ()로 감싸주지 않으면 unreachable code detected 에러가 발생한다.\n}\n\nexport default ExpenseItem;\n"],"mappings":";AAAA,OAAO,mBAAP;;;AAEA,SAASA,WAAT,OAA8C;EAAA,IAAzB;IAAEC,KAAF;IAASC,MAAT;IAAiBC;EAAjB,CAAyB;EAC5C;EACA;EACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,cAAL,CAAoB,OAApB,EAA6B;IAAED,KAAK,EAAE;EAAT,CAA7B,CAAd;EACA,MAAME,GAAG,GAAGH,IAAI,CAACE,cAAL,CAAoB,OAApB,EAA6B;IAAEC,GAAG,EAAE;EAAP,CAA7B,CAAZ;EACA,MAAMC,IAAI,GAAGJ,IAAI,CAACK,WAAL,EAAb;EACA,oBACE;IAAK,SAAS,EAAC,cAAf;IAAA,wBACE;MAAA,wBACE;QAAA,UAAMJ;MAAN;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAMG;MAAN;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAA,UAAMD;MAAN;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAK,SAAS,EAAC,2BAAf;MAAA,wBACE;QAAA,UAAKL;MAAL;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAK,SAAS,EAAC,qBAAf;QAAA,gBAAuCC,MAAvC;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF,CAN4C,CAoB5C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD;;KA9CQF,W;AAgDT,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}